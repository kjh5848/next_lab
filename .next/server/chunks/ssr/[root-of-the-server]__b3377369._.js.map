{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 94, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/styles/movie.module.css [app-ssr] (css module)"],"sourcesContent":["__turbopack_context__.v({\n  \"movie\": \"movie-module__BWtyzG__movie\",\n});\n"],"names":[],"mappings":"AAAA;AACA;AACA"}},
    {"offset": {"line": 103, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/kjh58/%EB%AC%B8%EC%84%9C/GitHub/next_lab/components/movie.tsx"],"sourcesContent":["import Link from \"next/link\";\r\nimport styles from \"../styles/movie.module.css\"\r\n\r\n\r\ninterface IMovieProps {\r\n  title: string;\r\n  id: string;\r\n  poster_path: string;\r\n}\r\n\r\nexport default function Movie({ \r\n    title, id, poster_path \r\n}: \r\n    IMovieProps \r\n    ) {\r\n  return (\r\n    <div className={styles.movie}>\r\n      <Link  href={`/movies/${id}`}> <img src={poster_path} alt={title} /></Link>\r\n      <Link href={`/movies/${id}`}>{title}</Link>\r\n    </div>\r\n  );\r\n}\r\n"],"names":[],"mappings":";;;;AAAA;AACA;;;;AASe,SAAS,MAAM,EAC1B,KAAK,EAAE,EAAE,EAAE,WAAW,EAEX;IAEb,qBACE,8OAAC;QAAI,WAAW,2HAAA,CAAA,UAAM,CAAC,KAAK;;0BAC1B,8OAAC,4JAAA,CAAA,UAAI;gBAAE,MAAM,CAAC,QAAQ,EAAE,IAAI;;oBAAE;kCAAC,8OAAC;wBAAI,KAAK;wBAAa,KAAK;;;;;;;;;;;;0BAC3D,8OAAC,4JAAA,CAAA,UAAI;gBAAC,MAAM,CAAC,QAAQ,EAAE,IAAI;0BAAG;;;;;;;;;;;;AAGpC","debugId":null}},
    {"offset": {"line": 154, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/styles/home.module.css [app-ssr] (css module)"],"sourcesContent":["__turbopack_context__.v({\n  \"container\": \"home-module__NoU7wq__container\",\n});\n"],"names":[],"mappings":"AAAA;AACA;AACA"}},
    {"offset": {"line": 163, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/kjh58/%EB%AC%B8%EC%84%9C/GitHub/next_lab/app/%28home%29/page.tsx"],"sourcesContent":["import axios from \"axios\";\r\nimport Link from \"next/link\";\r\nimport Movie from \"../../components/movie\";\r\nimport styles from \"../../styles/home.module.css\"\r\n\r\nexport const metadata = {\r\n  title: \"Home\"\r\n};\r\n\r\nexport const API_URL = \"https://nomad-movies.nomadcoders.workers.dev/movies\";\r\n\r\nasync function getMovies() {\r\n  console.log(\"I fetching\");\r\n  await new Promise((resolve) => setTimeout(resolve, 1000));\r\n  const response = await axios.get(API_URL);\r\n  return response.data;\r\n}\r\n\r\nexport default async function HomePage() {\r\n  const movies = await getMovies();\r\n  return (\r\n    <div className={styles.container}>\r\n      {movies.map((movie) => (\r\n        <Movie\r\n        key={movie.id}\r\n        title={movie.title}\r\n        id={movie.id}\r\n        poster_path={movie.poster_path}\r\n        />\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n"],"names":[],"mappings":";;;;;;AAAA;AAEA;AACA;;;;;AAEO,MAAM,WAAW;IACtB,OAAO;AACT;AAEO,MAAM,UAAU;AAEvB,eAAe;IACb,QAAQ,GAAG,CAAC;IACZ,MAAM,IAAI,QAAQ,CAAC,UAAY,WAAW,SAAS;IACnD,MAAM,WAAW,MAAM,qIAAA,CAAA,UAAK,CAAC,GAAG,CAAC;IACjC,OAAO,SAAS,IAAI;AACtB;AAEe,eAAe;IAC5B,MAAM,SAAS,MAAM;IACrB,qBACE,8OAAC;QAAI,WAAW,0HAAA,CAAA,UAAM,CAAC,SAAS;kBAC7B,OAAO,GAAG,CAAC,CAAC,sBACX,8OAAC,oHAAA,CAAA,UAAK;gBAEN,OAAO,MAAM,KAAK;gBAClB,IAAI,MAAM,EAAE;gBACZ,aAAa,MAAM,WAAW;eAHzB,MAAM,EAAE;;;;;;;;;;AAQrB","debugId":null}},
    {"offset": {"line": 210, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/styles/movie-videos.module.css [app-ssr] (css module)"],"sourcesContent":["__turbopack_context__.v({\n  \"container\": \"movie-videos-module__-fEI0G__container\",\n  \"featuredVideo\": \"movie-videos-module__-fEI0G__featuredVideo\",\n  \"noVideos\": \"movie-videos-module__-fEI0G__noVideos\",\n  \"publishDate\": \"movie-videos-module__-fEI0G__publishDate\",\n  \"sectionTitle\": \"movie-videos-module__-fEI0G__sectionTitle\",\n  \"title\": \"movie-videos-module__-fEI0G__title\",\n  \"videoCard\": \"movie-videos-module__-fEI0G__videoCard\",\n  \"videoGrid\": \"movie-videos-module__-fEI0G__videoGrid\",\n  \"videoSection\": \"movie-videos-module__-fEI0G__videoSection\",\n  \"videoTitle\": \"movie-videos-module__-fEI0G__videoTitle\",\n  \"videoWrapper\": \"movie-videos-module__-fEI0G__videoWrapper\",\n});\n"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"}},
    {"offset": {"line": 229, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/kjh58/%EB%AC%B8%EC%84%9C/GitHub/next_lab/components/movie-video.tsx"],"sourcesContent":["\"use client\"\r\n\r\n\r\nimport { API_URL } from \"../app/(home)/page\";\r\nimport styles from \"../styles/movie-videos.module.css\";\r\nimport { Suspense } from \"react\";\r\n\r\n// 비디오 타입 정의\r\ninterface Video {\r\n  id: string;\r\n  key: string;\r\n  name: string;\r\n  site: string;\r\n  type: string;\r\n  official: boolean;\r\n  published_at: string;\r\n  iso_639_1: string;\r\n}\r\n\r\n// 비디오 타입별 그룹화를 위한 인터페이스\r\ninterface VideoGroups {\r\n  [key: string]: Video[];\r\n}\r\n\r\nasync function getVideos(id: string) {\r\n  try {\r\n    // Use force-cache to improve performance\r\n    const res = await fetch(`${API_URL}/${id}/videos`, { cache: \"force-cache\" });\r\n    if (!res.ok) {\r\n      throw new Error(`Failed to fetch videos: ${res.status}`);\r\n    }\r\n    return await res.json();\r\n  } catch (error) {\r\n    console.error(\"Error fetching videos:\", error);\r\n    return [];\r\n  }\r\n}\r\n\r\n// Create a separate client component for lazy loading YouTube iframes\r\nfunction LazyYoutubeEmbed({ videoKey, title, height = \"100%\" }: { videoKey: string, title: string, height?: string }) {\r\n  const [isLoaded, setIsLoaded] = React.useState(false);\r\n  const thumbnailUrl = `https://img.youtube.com/vi/${videoKey}/maxresdefault.jpg`;\r\n  \r\n  return (\r\n    <div className={styles.videoWrapper} style={{ position: 'relative' }}>\r\n      {!isLoaded && (\r\n        <div \r\n          onClick={() => setIsLoaded(true)}\r\n          style={{ \r\n            backgroundImage: `url(${thumbnailUrl})`, \r\n            backgroundSize: 'cover',\r\n            backgroundPosition: 'center',\r\n            width: '100%',\r\n            height,\r\n            display: 'flex',\r\n            justifyContent: 'center',\r\n            alignItems: 'center',\r\n            cursor: 'pointer',\r\n            position: 'absolute',\r\n            top: 0,\r\n            left: 0\r\n          }}\r\n        >\r\n          <div \r\n            style={{ \r\n              width: '70px', \r\n              height: '50px', \r\n              backgroundColor: 'red', \r\n              borderRadius: '10px',\r\n              display: 'flex',\r\n              justifyContent: 'center',\r\n              alignItems: 'center'\r\n            }}\r\n          >\r\n            <div style={{ width: 0, height: 0, borderTop: '10px solid transparent', borderBottom: '10px solid transparent', borderLeft: '20px solid white', marginLeft: '5px' }}></div>\r\n          </div>\r\n        </div>\r\n      )}\r\n      \r\n      {isLoaded && (\r\n        <iframe\r\n          width=\"100%\"\r\n          height={height}\r\n          src={`https://www.youtube.com/embed/${videoKey}`}\r\n          title={title}\r\n          frameBorder=\"0\"\r\n          allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\r\n          allowFullScreen\r\n        ></iframe>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\n// Server component\r\nexport default async function MovieVideos({ id }: { id: string }) {\r\n  const videos = await getVideos(id);\r\n\r\n  // 비디오가 없는 경우 처리\r\n  if (!videos || videos.length === 0) {\r\n    return (\r\n      <div className={styles.container}>\r\n        <h2 className={styles.title}>Videos</h2>\r\n        <p className={styles.noVideos}>No videos available for this movie.</p>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // 비디오를 타입별로 그룹화\r\n  const groupedVideos: VideoGroups = videos.reduce(\r\n    (groups: VideoGroups, video: Video) => {\r\n      const type = video.type || \"Other\";\r\n      if (!groups[type]) {\r\n        groups[type] = [];\r\n      }\r\n      groups[type].push(video);\r\n      return groups;\r\n    },\r\n    {}\r\n  );\r\n\r\n  // 주요 비디오 타입을 우선적으로 표시\r\n  const displayOrder = [\r\n    \"Trailer\",\r\n    \"Teaser\",\r\n    \"Clip\",\r\n    \"Featurette\",\r\n    \"Behind the Scenes\",\r\n    \"Other\",\r\n  ];\r\n\r\n  // 최신 영상이 먼저 오도록 정렬 함수\r\n  const sortByDate = (a: Video, b: Video) => {\r\n    return (\r\n      new Date(b.published_at).getTime() - new Date(a.published_at).getTime()\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className={styles.container}>\r\n      <h2 className={styles.title}>Videos</h2>\r\n\r\n      {/* 비디오 타입별로 섹션 생성 */}\r\n      {displayOrder.map((type) => {\r\n        const videosOfType = groupedVideos[type];\r\n        if (!videosOfType || videosOfType.length === 0) return null;\r\n\r\n        return (\r\n          <div key={type} className={styles.videoSection}>\r\n            <h3 className={styles.sectionTitle}>{type}s</h3>\r\n\r\n            {/* 첫 번째 비디오는 크게 표시 (주로 최신 예고편) */}\r\n            {type === \"Trailer\" && videosOfType.sort(sortByDate)[0] && (\r\n              <div className={styles.featuredVideo}>\r\n                <Suspense fallback={<div style={{ width: '100%', height: '500px', backgroundColor: '#f0f0f0', display: 'flex', justifyContent: 'center', alignItems: 'center' }}>Loading trailer...</div>}>\r\n                  <LazyYoutubeEmbed \r\n                    videoKey={videosOfType[0].key} \r\n                    title={videosOfType[0].name} \r\n                    height=\"500px\"\r\n                  />\r\n                </Suspense>\r\n                <h4 className={styles.videoTitle}>{videosOfType[0].name}</h4>\r\n                <p className={styles.publishDate}>\r\n                  {new Date(videosOfType[0].published_at).toLocaleDateString(\r\n                    \"ko-KR\",\r\n                    {\r\n                      year: \"numeric\",\r\n                      month: \"long\",\r\n                      day: \"numeric\",\r\n                    }\r\n                  )}\r\n                </p>\r\n              </div>\r\n            )}\r\n\r\n            {/* 비디오 그리드 */}\r\n            <div className={styles.videoGrid}>\r\n              {videosOfType\r\n                .sort(sortByDate)\r\n                // 트레일러의 경우 첫 번째는 이미 크게 표시했으므로 두 번째부터\r\n                .slice(type === \"Trailer\" ? 1 : 0)\r\n                .map((video) => (\r\n                  <div key={video.id} className={styles.videoCard}>\r\n                    <Suspense fallback={<div style={{ width: '100%', height: '100%', backgroundColor: '#f0f0f0', display: 'flex', justifyContent: 'center', alignItems: 'center' }}>Loading video...</div>}>\r\n                      <LazyYoutubeEmbed \r\n                        videoKey={video.key} \r\n                        title={video.name} \r\n                      />\r\n                    </Suspense>\r\n                    <h4 className={styles.videoTitle}>{video.name}</h4>\r\n                    <p className={styles.publishDate}>\r\n                      {new Date(video.published_at).toLocaleDateString(\r\n                        \"ko-KR\",\r\n                        {\r\n                          year: \"numeric\",\r\n                          month: \"long\",\r\n                          day: \"numeric\",\r\n                        }\r\n                      )}\r\n                    </p>\r\n                  </div>\r\n                ))}\r\n            </div>\r\n          </div>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n}"],"names":[],"mappings":"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","debugId":null}}]
}